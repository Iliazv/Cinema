# Generated by Django 2.2.14 on 2023-12-02 13:47

import datetime
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Film',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Фильм')),
                ('country', models.CharField(max_length=100, verbose_name='Страна производства')),
                ('creation_year', models.IntegerField(default=2023, verbose_name='Год создания')),
                ('age', models.IntegerField(default=0, verbose_name='Возрастное ограничение')),
                ('duration', models.DurationField(default=datetime.timedelta, verbose_name='Продолжительность')),
                ('description', models.TextField(max_length=5000, verbose_name='Описание')),
                ('director', models.CharField(max_length=80, verbose_name='Режиссер')),
                ('picture', models.ImageField(blank=True, upload_to='film_images/', verbose_name='Изображение')),
                ('preview', models.ImageField(blank=True, upload_to='film_images/', verbose_name='Превью')),
                ('link', models.CharField(default='', max_length=256, verbose_name='Ссылка')),
                ('tag', models.CharField(blank=True, max_length=80, verbose_name='Тег')),
                ('subscribe', models.BooleanField(default=False, verbose_name='Подписка')),
            ],
            options={
                'verbose_name': 'Фильм',
                'verbose_name_plural': 'Фильмы',
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(default=datetime.datetime.now, verbose_name='Дата показа')),
                ('type', models.CharField(choices=[('2d', '2D'), ('3d', '3D'), ('4d', '4D')], default='2d', max_length=2, verbose_name='Технология')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='films.Film', verbose_name='Фильм')),
            ],
            options={
                'verbose_name': 'Сессия',
                'verbose_name_plural': 'Сессии',
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='film_images', verbose_name='Изображение')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='films.Film', verbose_name='Фильм')),
            ],
            options={
                'verbose_name': 'Изображение',
                'verbose_name_plural': 'Изображения',
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre', models.CharField(choices=[('приключения', 'Приключения'), ('триллер', 'Триллер'), ('ужасы', 'Ужасы'), ('фантастика', 'Фантастика'), ('боевик', 'Боевик'), ('детектив', 'Детектив'), ('комедия', 'Комедия'), ('криминал', 'Криминал'), ('комедия', 'Комедия'), ('драма', 'Драма'), ('фэнтези', 'Фэнтези'), ('спорт', 'Спорт')], max_length=20, verbose_name='Жанр')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='genres', to='films.Film', verbose_name='Фильм')),
            ],
            options={
                'verbose_name': 'Жанр',
                'verbose_name_plural': 'Жанры',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, verbose_name='email')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
